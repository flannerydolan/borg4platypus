From 4b89cd37654a43cb51f0c1588821c7ccfbb772af Mon Sep 17 00:00:00 2001
From: jack <jackjackk@gmail.com>
Date: Thu, 19 Oct 2017 21:28:27 -0400
Subject: [PATCH] patched BitBucket master to work w/ Python 3.6 &
 borg4platypus

---
 dtlz2.py               |  41 ++++++++--------
 plugins/Python/borg.py | 130 +++++++++++++++++++++++++------------------------
 plugins/Python/test.py |   2 +-
 3 files changed, 87 insertions(+), 86 deletions(-)

diff --git a/dtlz2.py b/dtlz2.py
index ab0a88b..991342c 100644
--- a/dtlz2.py
+++ b/dtlz2.py
@@ -14,31 +14,30 @@ nobjs = 2
 k = nvars - nobjs + 1
 
 while True:
-	# Read the next line from standard input
-	line = raw_input()
+    # Read the next line from standard input
+    line = input()
 
-	# Stop if the Borg MOEA is finished
-	if line == "":
-		break
+    # Stop if the Borg MOEA is finished
+    if line == "":
+        break
 
-	# Parse the decision variables from the input
-	vars = map(float, line.split())
+    # Parse the decision variables from the input
+    vars = list(map(float, line.split()))
 
-	# Evaluate the DTLZ2 problem
-	g = 0
+    # Evaluate the DTLZ2 problem
+    g = 0
 
-	for i in range(nvars-k, nvars):
-		g = g + (vars[i] - 0.5)**2
+    for i in range(nvars - k, nvars):
+        g += (vars[i] - 0.5) ** 2
 
-	objs = [1.0 + g]*nobjs
+    objs = [1.0 + g] * nobjs
 
-	for i in range(nobjs):
-		for j in range(nobjs-i-1):
-			objs[i] = objs[i] * cos(0.5 * pi * vars[j])
-		if i != 0:
-			objs[i] = objs[i] * sin(0.5 * pi * vars[nobjs-i-1])
-
-	# Print objectives to standard output, flush to write immediately
-	print " ".join(["%0.17f" % obj for obj in objs])
-	stdout.flush()
+    for i in range(nobjs):
+        for j in range(nobjs - i - 1):
+            objs[i] = objs[i] * cos(0.5 * pi * vars[j])
+        if i != 0:
+            objs[i] = objs[i] * sin(0.5 * pi * vars[nobjs - i - 1])
 
+    # Print objectives to standard output, flush to write immediately
+    print(" ".join(["%0.17f" % obj for obj in objs]))
+    stdout.flush()
diff --git a/plugins/Python/borg.py b/plugins/Python/borg.py
index 52481de..83dd416 100644
--- a/plugins/Python/borg.py
+++ b/plugins/Python/borg.py
@@ -36,6 +36,7 @@ from ctypes import *
 import os
 import sys
 import time
+from ctypes.util import find_library
 
 terminate=False
 
@@ -74,17 +75,13 @@ class Configuration:
         using the Borg MOEA.
         """
 
+
         if path:
             Configuration.libc = CDLL(path)
-        elif os.name == "posix":
-            try:
-                Configuration.libc = CDLL("libc.so.6")
-            except OSError:
-                return
         elif os.name == "nt" and cdll.msvcrt:
             Configuration.libc = cdll.msvcrt
         else:
-            return
+            Configuration.libc = CDLL(find_library('c'))
 
         try:
             Configuration.stdout = Configuration.libc.fdopen(sys.stdout.fileno(), "w")
@@ -92,7 +89,7 @@ class Configuration:
             Configuration.stdout = Configuration.libc._fdopen(sys.stdout.fileno(), "w")
 
     @staticmethod
-    def setBorgLibrary(path=None):
+    def setBorgLibrary(path='borg'):
         """ Override the location of the Borg MOEA shared object.
 
         If the path is not specified, this method attempts to auto-detect the location
@@ -101,37 +98,22 @@ class Configuration:
         user to manually invoke this method before using the Borg MOEA
         """
 
-        if path:
-            try:
-                Configuration.libborg = CDLL(path)
-                Configuration.libborg.BORG_Copyright
-                Configuration.stdcall = False
-            except AttributeError:
-                # Not using __cdecl, try __stdcall instead
-                if os.name == "nt":
-                    Configuration.libborg = WinDLL(path)
-                    Configuration.stdcall = True
-        elif os.name == "posix":
-            try:
-                Configuration.libborg = CDLL("./libborg.so")
-                Configuration.stdcall = False
-            except OSError:
-                return
-        elif os.name == "nt":
-            try:
-                Configuration.libborg = CDLL("./borg.dll")
-                Configuration.libborg.BORG_Copyright
-                Configuration.stdcall = False
-            except OSError:
-                return
-            except AttributeError:
-                # Not using __cdecl, try __stdcall instead
-                try:
-                    Configuration.libborg = WinDLL("./borg.dll")
-                    Configuration.stdcall = True
-                except OSError:
-                    return
-                    
+        path = find_library(path)
+        if path is None:
+            raise OSError('Unable to locate "{}" lib'.format(path))
+
+        try:
+            Configuration.libborg = CDLL(path)
+            Configuration.libborg.BORG_Copyright
+            Configuration.stdcall = False
+        except AttributeError:
+            # Not using __cdecl, try __stdcall instead
+            if os.name == "nt":
+                Configuration.libborg = WinDLL(path)
+                Configuration.stdcall = True
+            else:
+                raise Exception('Unable to load borg lib')
+
         # Set result type of functions with non-standard types
         Configuration.libborg.BORG_Solution_get_variable.restype = c_double
         Configuration.libborg.BORG_Solution_get_objective.restype = c_double
@@ -146,7 +128,7 @@ class Configuration:
         if value:
             Configuration.libborg.BORG_Random_seed(c_ulong(value))
         else:
-            Configuration.libborg.BORG_Random_seed(c_ulong(os.getpid()*long(time.time())))
+            Configuration.libborg.BORG_Random_seed(c_ulong(os.getpid()*int(time.time())))
 
     @staticmethod
     def enableDebugging():
@@ -180,27 +162,30 @@ class Configuration:
         except AttributeError:
             # The serial Borg MOEA C library is loaded; switch to parallel
             try:
-                Configuration.setBorgLibrary("./libborgmm.so")
+                Configuration.setBorgLibrary("borgmm")
             except OSError:
                 try:
-                    Configuration.setBorgLibrary("./libborgms.so")
+                    Configuration.setBorgLibrary("borgms")
                 except OSError:
                     raise OSError("Unable to locate the parallel Borg MOEA C library")
 
         # The following line is needed to load the MPI library correctly
-        CDLL("libmpi.so.0", RTLD_GLOBAL)
+        CDLL(find_library('mpi'), RTLD_GLOBAL)
 
         # Pass the command-line arguments to MPI_Init
         argc = c_int(len(sys.argv))
-        CHARPP = c_char_p * len(sys.argv)
+        CHARPP = c_char_p * (len(sys.argv))
         argv = CHARPP()
 
         for i in range(len(sys.argv)):
-            argv[i] = sys.argv[i]
+            argv[i] = sys.argv[i].encode('ascii')
 
         Configuration.libborg.BORG_Algorithm_ms_startup(
-            cast(addressof(argc), POINTER(c_int)),
-            cast(addressof(argv), POINTER(CHARPP)))
+            POINTER(c_int)(),
+            POINTER(CHARPP)()
+            #cast(addressof(argc), POINTER(c_int)),
+            #cast(addressof(argv), POINTER(CHARPP)))
+        )
 
         Configuration.startedMPI = True
 
@@ -307,6 +292,7 @@ class Borg:
             self.CMPFUNC = CFUNCTYPE(c_int, POINTER(c_double), POINTER(c_double), POINTER(c_double))
 
         self.callback = self.CMPFUNC(self.function)
+        Configuration.libborg.BORG_Problem_create.restype = c_void_p
         self.reference = c_void_p(Configuration.libborg.BORG_Problem_create(numberOfVariables, numberOfObjectives, numberOfConstraints, self.callback))
 
         if bounds:
@@ -373,7 +359,7 @@ class Borg:
         Configuration.libborg.BORG_Problem_set_bounds(self.reference, index, c_double(lowerBound), c_double(upperBound))
 
     def solveMPI(self, islands=1, maxTime=None, maxEvaluations=None, initialization=None, runtime=None,
-            allEvaluations=None):
+            allEvaluations=None, frequency=None):
         """ Runs the master-slave or multi-master Borg MOEA using MPI.
 
         islands        - The number of islands
@@ -385,6 +371,7 @@ class Borg:
         allEvaluations - Filename pattern for saving all evaluations (the filename should include
                          one %d which gets replaced by the island index).  Since this can quickly
                          generate large files, use this option with caution.
+        frequency      - The number of function evaluations between runtime outputs
         
         Note: All nodes must invoke solveMPI.  However, only one node will return the discovered
         Pareto optimal solutions.  The rest will return None.
@@ -412,15 +399,19 @@ class Borg:
             Configuration.libborg.BORG_Algorithm_ms_max_evaluations(c_int(maxEvaluations))
 
         if initialization and islands > 1:
-            Configuration.libborg.BORG_Algorithm_ms_initialization(c_int(initialization));
+            Configuration.libborg.BORG_Algorithm_ms_initialization(c_int(initialization))
 
         if runtime:
-            Configuration.libborg.BORG_Algorithm_output_runtime(c_char_p(runtime));
+            Configuration.libborg.BORG_Algorithm_output_runtime(c_char_p(runtime.encode()));
+
+        if frequency:
+            Configuration.libborg.BORG_Algorithm_output_frequency(c_int(frequency));
 
         if allEvaluations:
             Configuration.libborg.BORG_Algorithm_output_evaluations(c_char_p(allEvaluations));
 
-        result = Configuration.libborg.BORG_Algorithm_ms_run(self.reference)
+        Configuration.libborg.BORG_Algorithm_ms_run.restype = c_void_p
+        result = c_void_p(Configuration.libborg.BORG_Algorithm_ms_run(self.reference))
 
         return Result(result, self) if result else None
 
@@ -438,36 +429,37 @@ class Borg:
 
         maxEvaluations = settings.get("maxEvaluations", 10000)
         start = time.clock()
-
-        pm = Configuration.libborg.BORG_Operator_create("PM", 1, 1, 2, Configuration.libborg.BORG_Operator_PM)
+        Configuration.libborg.BORG_Operator_create.restype = c_void_p
+        pm = c_void_p(Configuration.libborg.BORG_Operator_create("PM", 1, 1, 2, Configuration.libborg.BORG_Operator_PM))
         Configuration.libborg.BORG_Operator_set_parameter(pm, 0, c_double(settings.get("pm.rate", 1.0 / self.numberOfVariables)))
         Configuration.libborg.BORG_Operator_set_parameter(pm, 1, c_double(settings.get("pm.distributionIndex", 20.0)))
         
-        sbx = Configuration.libborg.BORG_Operator_create("SBX", 2, 2, 2, Configuration.libborg.BORG_Operator_SBX)
+        sbx = c_void_p(Configuration.libborg.BORG_Operator_create("SBX", 2, 2, 2, Configuration.libborg.BORG_Operator_SBX))
         Configuration.libborg.BORG_Operator_set_parameter(sbx, 0, c_double(settings.get("sbx.rate", 1.0)))
         Configuration.libborg.BORG_Operator_set_parameter(sbx, 1, c_double(settings.get("sbx.distributionIndex", 15.0)))
         Configuration.libborg.BORG_Operator_set_mutation(sbx, pm)
 
-        de = Configuration.libborg.BORG_Operator_create("DE", 4, 1, 2, Configuration.libborg.BORG_Operator_DE)
+        de = c_void_p(Configuration.libborg.BORG_Operator_create("DE", 4, 1, 2, Configuration.libborg.BORG_Operator_DE))
         Configuration.libborg.BORG_Operator_set_parameter(de, 0, c_double(settings.get("de.crossoverRate", 0.1)))
         Configuration.libborg.BORG_Operator_set_parameter(de, 1, c_double(settings.get("de.stepSize", 0.5)))
         Configuration.libborg.BORG_Operator_set_mutation(de, pm)
 
-        um = Configuration.libborg.BORG_Operator_create("UM", 1, 1, 1, Configuration.libborg.BORG_Operator_UM)
+        um = c_void_p(Configuration.libborg.BORG_Operator_create("UM", 1, 1, 1, Configuration.libborg.BORG_Operator_UM))
         Configuration.libborg.BORG_Operator_set_parameter(um, 0, c_double(settings.get("um.rate", 1.0 / self.numberOfVariables)))
 
-        spx = Configuration.libborg.BORG_Operator_create("SPX", c_int(settings.get("spx.parents", 10)), c_int(settings.get("spx.offspring", 2)), 1, Configuration.libborg.BORG_Operator_SPX)
+        spx = c_void_p(Configuration.libborg.BORG_Operator_create("SPX", c_int(settings.get("spx.parents", 10)), c_int(settings.get("spx.offspring", 2)), 1, Configuration.libborg.BORG_Operator_SPX))
         Configuration.libborg.BORG_Operator_set_parameter(spx, 0, c_double(settings.get("spx.epsilon", 3.0)))
 
-        pcx = Configuration.libborg.BORG_Operator_create("PCX", c_int(settings.get("pcx.parents", 10)), c_int(settings.get("pcx.offspring", 2)), 2, Configuration.libborg.BORG_Operator_PCX)
+        pcx = c_void_p(Configuration.libborg.BORG_Operator_create("PCX", c_int(settings.get("pcx.parents", 10)), c_int(settings.get("pcx.offspring", 2)), 2, Configuration.libborg.BORG_Operator_PCX))
         Configuration.libborg.BORG_Operator_set_parameter(pcx, 0, c_double(settings.get("pcx.eta", 0.1)))
         Configuration.libborg.BORG_Operator_set_parameter(pcx, 1, c_double(settings.get("pcx.zeta", 0.1)))
 
-        undx = Configuration.libborg.BORG_Operator_create("UNDX", c_int(settings.get("undx.parents", 10)), c_int(settings.get("undx.offspring", 2)), 2, Configuration.libborg.BORG_Operator_UNDX)
+        undx = c_void_p(Configuration.libborg.BORG_Operator_create("UNDX", c_int(settings.get("undx.parents", 10)), c_int(settings.get("undx.offspring", 2)), 2, Configuration.libborg.BORG_Operator_UNDX))
         Configuration.libborg.BORG_Operator_set_parameter(undx, 0, c_double(settings.get("undx.zeta", 0.5)))
         Configuration.libborg.BORG_Operator_set_parameter(undx, 1, c_double(settings.get("undx.eta", 0.35)))
 
-        algorithm = Configuration.libborg.BORG_Algorithm_create(self.reference, 6)
+        Configuration.libborg.BORG_Algorithm_create.restype = c_void_p
+        algorithm = c_void_p(Configuration.libborg.BORG_Algorithm_create(self.reference, 6))
         Configuration.libborg.BORG_Algorithm_set_operator(algorithm, 0, sbx)
         Configuration.libborg.BORG_Algorithm_set_operator(algorithm, 1, de)
         Configuration.libborg.BORG_Algorithm_set_operator(algorithm, 2, pcx)
@@ -542,7 +534,8 @@ class Borg:
                 if fp is None:
                     statistics.append(entry)
                 else:
-                    archive = Result(Configuration.libborg.BORG_Algorithm_get_result(algorithm), self, statistics)
+                    Configuration.libborg.BORG_Algorithm_get_result.restype = c_void_p
+                    archive = Result(c_void_p(Configuration.libborg.BORG_Algorithm_get_result(algorithm)), self, statistics)
                     if runtimeformat == 'optimizedv':
                         row = ["{0}".format(entry[dynamic]) for dynamic in dynamics_header]
                         fp.write("//")
@@ -586,7 +579,8 @@ class Borg:
 
                 lastSnapshot = currentEvaluations
 
-        result = Configuration.libborg.BORG_Algorithm_get_result(algorithm)
+        Configuration.libborg.BORG_Algorithm_get_result.restype = c_void_p
+        result = c_void_p(Configuration.libborg.BORG_Algorithm_get_result(algorithm))
         if "runtimefile" in settings:
             fp.close()
 
@@ -643,7 +637,7 @@ class Solution:
 
     def display(self, out=sys.stdout, separator=" "):
         """ Prints the decision variables, objectives, and constraints to standard output. """
-        print >> out, separator.join(map(str, self.getVariables() + self.getObjectives() + self.getConstraints()))
+        print(separator.join(map(str, self.getVariables() + self.getObjectives() + self.getConstraints())), file=out, end='\n')
 
     def violatesConstraints(self):
         """ Returns True if this solution violates one or more constraints; False otherwise. """
@@ -677,7 +671,8 @@ class Result:
 
     def get(self, index):
         """ Returns the Pareto optimal solution at the given index. """
-        return Solution(Configuration.libborg.BORG_Archive_get(self.reference, index), self.problem)
+        Configuration.libborg.BORG_Archive_get.restype = c_void_p
+        return Solution(c_void_p(Configuration.libborg.BORG_Archive_get(self.reference, index)), self.problem)
 
 class ResultIterator:
     """ Iterates over the solutions in a Pareto optimal set. """
@@ -687,7 +682,10 @@ class ResultIterator:
         self.result = result
         self.index = -1
 
-    def next(self):
+    def __iter__(self):
+        return self
+
+    def __next__(self):
         """ Returns the next Pareto optimal solution in the set. """
         self.index = self.index + 1
 
@@ -696,6 +694,10 @@ class ResultIterator:
         else:
             return self.result.get(self.index)
 
+    def next(self):
+        return self.__next__()
+    
+
 def _functionWrapper(function, numberOfVariables, numberOfObjectives, numberOfConstraints, directions=None):
     """ Wraps a Python evaluation function and converts it to the function signature
     required by the C API.
diff --git a/plugins/Python/test.py b/plugins/Python/test.py
index 0e828e5..bf36700 100644
--- a/plugins/Python/test.py
+++ b/plugins/Python/test.py
@@ -29,5 +29,5 @@ borg.setEpsilons(*[0.01]*nobjs)
 result = borg.solve({"maxEvaluations":1000000})
 
 for solution in result:
-	print solution.getObjectives()
+	print(solution.getObjectives())
 
-- 
2.14.2

